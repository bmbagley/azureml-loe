{
	"name": "dataflow_LOE_ETL",
	"properties": {
		"description": "Mapping columns with if/then logic and categorization",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "loe_raw_pqt",
						"type": "DatasetReference"
					},
					"name": "loerawtransform"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Select1"
				},
				{
					"name": "castingdtypes"
				},
				{
					"name": "RMNAclient"
				}
			],
			"script": "\n\nsource(output(\n\t\tclient_name as string,\n\t\tengagement_title as string,\n\t\tsfdc_opp_num as string,\n\t\tplatform as string,\n\t\tonsite_location as string,\n\t\tsigned_famsa as string,\n\t\texisting_customer as string,\n\t\tproducts as string,\n\t\tcloud_ops_customer as string,\n\t\tcloud_platform as string,\n\t\tdesired_start_date as string,\n\t\tdesired_end_date as string,\n\t\tproposal_link as string,\n\t\tsecond_doc_link as string,\n\t\tloe_created_by as string,\n\t\tloe_created_date as string,\n\t\tpricing_basis as string,\n\t\tproject_details as string,\n\t\tdesired_duration as string,\n\t\tloe_duration_weeks as string,\n\t\tproject_summary_consider_account_background_location_resourcing_key_dates_etc as string,\n\t\t{__index_level_0__} as long\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> loerawtransform\nloerawtransform select(mapColumn(\n\t\tclient_name,\n\t\tengagement_title,\n\t\tsfdc_opp_num,\n\t\tplatform,\n\t\tsigned_famsa,\n\t\texisting_customer,\n\t\tcloud_ops_customer,\n\t\tcloud_platform,\n\t\tdesired_start_date,\n\t\tdesired_end_date,\n\t\tloe_created_by,\n\t\tloe_created_date,\n\t\tpricing_basis,\n\t\tproject_details,\n\t\tdesired_duration,\n\t\tproject_summary_consider_account_background_location_resourcing_key_dates_etc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(sfdc_opp_num = iif(sfdc_opp_num == 'NA' || sfdc_opp_num == '', 99999,\n    iif(length(sfdc_opp_num)<= 6, toInteger(sfdc_opp_num), 99999)\n),\n\t\tclient_name = iif(client_name == '<Client Name>',\n    'NA' , client_name),\n\t\tplatform = iif(regexMatch(platform, `[\\+\\\\]+`), 'Hybrid', platform),\n\t\tsigned_famsa = toBoolean(\n    iif(lower(signed_famsa) == 'yes', 'True', 'False')\n),\n\t\texisting_customer = toBoolean(iif(lower(signed_famsa) == 'yes', 'True', 'False')),\n\t\tcloud_ops_customer = toBoolean(iif(lower(cloud_ops_customer) == 'yes', 'True', 'False')),\n\t\tdesired_start_date = iif(regexMatch(desired_start_date, `/`),\n    toDate(desired_start_date,'MM/dd/yy'), \n    toDate(desired_start_date, 'dd-MMM-yyyy')),\n\t\tdesired_end_date = iif(regexMatch(desired_end_date, `/`),\n    toDate(desired_end_date,'MM/dd/yy'), \n    toDate(desired_end_date, 'dd-MMM-yyyy')),\n\t\tloe_created_date = iif(regexMatch(loe_created_date, `/`),\n    toDate(loe_created_date,'MM/dd/yy'), \n    toDate(loe_created_date, 'dd-MMM-yyyy')),\n\t\tdesired_duration = toFloat(desired_duration),\n\t\tproject_summary_consider_account_background_location_resourcing_key_dates_etc = regexReplace(project_summary_consider_account_background_location_resourcing_key_dates_etc,\n`[^A-Za-z0-9\\s]+`,'')) ~> castingdtypes\ncastingdtypes filter(client_name != 'NA') ~> RMNAclient\nRMNAclient sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> sink1"
		}
	}
}